#!/usr/bin/env bash

APP_NAME="$( basename -- "${0}" )"
VERSION="1.0.2"

function fz::kill()
{
	# shellcheck disable=SC2086     # SC2086: Double quote to prevent globbing and word splitting.
	ps aux | fzf --exact --header-lines=1 --prompt="kill ${1:--SIGTERM} > " --tac | awk '{ print $2 }' | xargs --no-run-if-empty kill ${1:--SIGTERM}
}

function fz::man()
{
	local fzfPreview="sed 's/[ ()]//g' <<< {1}.{2} | xargs man"
	local binBatcat=""

	binBatcat="$( command -v batcat || command -v bat )"

	[[ -n "${binBatcat}" ]] && \
		fzfPreview+=' | sh -c "col --no-backspaces --spaces | '"${binBatcat}"' --color=always --language=man --paging=never --style=plain"'

	man --apropos . \
		| fzf --preview="${fzfPreview}" --prompt="man > " --query="^${*}" --reverse --select-1 \
		| awk '{ gsub( /[()]/, "" ) ; print $1"."$2 }' \
		| xargs --no-run-if-empty man
}

function fz::ssh()
{
	local fSshConfig=( "${HOME}"/.ssh/config "${HOME}"/.ssh/config.d/* )
	local sshServer=""

	sshServer="$( \
		grep "^Host" "${fSshConfig[@]}" 2>/dev/null \
			| awk '{ print $2 }' \
			| fzf --height=6 --preview="ssh -G -T {} | head --lines=4 | column --table" --prompt="ssh > " \
	)"

	# shellcheck disable=SC2029     # SC2029: Note that, unescaped, this expands on the client side.
	if [[ -n "${sshServer}" ]] ; then ssh "${@}" "${sshServer}" ; fi
}

function __fz::help()
{
	__fz::version

	cat <<- HEREDOC

	Pipe commands to FZF.
	Usage: ${APP_NAME} [COMMAND] [arguments for COMMAND]
	       ${APP_NAME} [OPTION]

	Commands:

	$( compgen -A function "fz::" | sed "s/^fz::/    /" )

	Options:

	    -h, --help                display this help
	    -V, --version             output version information
	HEREDOC
}

function __fz::main()
{
	local arg="${1:---help}"

	command -v fzf &>/dev/null || {
		printf "%s\n" "[${APP_NAME} error]: Install \"fzf\" to use ${APP_NAME}."
		return 1
	}

	case "${arg}" in
		-V|--version)
			__fz::version
			return 0
		;;

		-h|--help)
			__fz::help
			return 0
		;;

		*)
			if [[ "$( type -t "fz::${arg}" )" != "function" ]] ; then
				printf "%s\n" "[${APP_NAME} error]: Found argument \"${arg}\" which wasn't expected. Try --help."
				return 1
			fi

			shift
			fz::"${arg}" "${@}"
			return "${?}"
		;;
	esac
}

function __fz::version() { printf "%s\n" "${APP_NAME} ${VERSION}" ; }

__fz::main "${@}"
